# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Start_Page.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import main_page
import result_page
from github import Github
from datetime import datetime
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QMessageBox
import csv 
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from result_page import second_page_dialog


from PyQt5 import QtCore, QtGui, QtWidgets
from result_page import second_page_dialog

main_list = ["Total Opened Isues", "Total Closed Issues", "Dıfference between opened and closed issues",
             "Distrubution of issues on contributors", "Number of label types", "Label usage frequency",
             "Total amount of contributors", "Total number of assignees on spesific Repo",
             "Total number of comments", "Avg. Comment Lenght", "Label colors for default Spesic titles",
             "Mean time to response the issues.", "Total amount of Milestones", "Total Opened Milestones",
             "Total Closed Milestones"]
left_list = main_list
right_list = []

open_issues = []
close_issues = []
total_issues = []

class Repository():
  def __init__(self):
    self.total_opened_issues=0
    self.total_closed_issues=0
    self.total_issue_number=0
    self.issue_count_difference=abs(self.total_opened_issues-self.total_closed_issues)
    self.distrubution_of_issues=0
    self.number_of_label_types=0
    self.label_usage_freq=0
    self.total_contributors=0
    self.total_num_assignee_specific_issue=0
    self.total_comment_no=0
    self.avg_comment_leght=0
    self.label_colors_specific=""
    self.mean_response_time=0
    self.total_milestone_number=0
    self.total_opened_milestones=0
    self.total_closed_milestones=0
    self.Result=[]


Repo=Repository()


class Ui_Dialog(object):

    def Get_Ui(self,ui_dialog):
        self.ui=ui_dialog

    def Selected_extract(self):
        global right_list
        item_list=right_list
        for item in item_list:
            if(item=="Total Opened Isues"):
                temp=[]
                temp.append(Repo.total_opened_issues)
                Repo.Result.append(temp)
            elif(item=="Total Closed Issues"):
                temp=[]
                temp.append(Repo.total_closed_issues)
                Repo.Result.append(temp)
            elif(item=="Dıfference between opened and closed issues"):
                temp=[]
                temp.append(Repo.total_opened_issues)
                temp.append(Repo.total_closed_issues)
                temp.append(abs(Repo.total_opened_issues-Repo.total_closed_issues))
                Repo.Result.append(temp)
            elif(item=="Distrubution of issues on contributors"):
                pass
            elif(item=="Number of label types" ):
                pass
            elif(item=="Label usage frequency"):
                pass
            elif(item=="Total amount of contributors"):
                pass
            elif(item=="Total number of assignees on spesific Repo"):
                pass
            elif(item=="Total number of comments"):
                pass
            elif(item=="Avg. Comment Lenght"):
                pass
            elif(item=="Label colors for default Spesic titles"):
                pass
            elif(item=="Mean time to response the issues."):
                pass            
            elif(item=="Total amount of Milestones"):
                pass
            elif(item=="Total Opened Milestones"):
                pass
            elif(item=="Total Closed Milestones"):
                pass
            else:
                print("Error...")
        print("Repo List ==============>>>>",Repo.Result)



    def show_button_clicked(self):
        """ self.ui.destroy()
        ui2=second_page_dialog()
        ui2.show_screen() """
        global right_list
        print(len(right_list))
        if(len(right_list)>5):
            msg = QMessageBox()
            msg.setWindowTitle("Too many items selected...")
            msg.setText("Please select at most 5 items...")
            x = msg.exec_()
        else:    
            self.ui.setHidden(True)
            self.Set_Url()
            self.url = self.parse_url()
            self.repo = self.get_repo()
            self.Set_Dates()
            self.extract_data()
            self.Selected_extract()
            ui2=second_page_dialog()
            ui2.define_params(Repo.Result)
            ui2.show_screen()

    def cancel(self):
        sys.exit(app.exec_())

    def move_left_to_right(self):
        global main_list
        global left_list
        global right_list
        temp=[]
        temp = [item.text() for item in self.listWidget_Issue.selectedItems()]
        for temp_item in temp:
            left_list.remove(temp_item)
            right_list.append(temp_item)
        print(right_list)
        self.listWidget_Selected_Issue.addItems(right_list)
        self.listWidget_Issue.clear()
        self.listWidget_Issue.addItems(left_list)

    def move_right_to_left(self):
        global main_list
        global left_list
        global right_list

        temp = [item.text() for item in self.listWidget_Selected_Issue.selectedItems()]
        for temp_item in temp:
            right_list.remove(temp_item)
            left_list.append(temp_item)

        print(len(right_list))
        self.listWidget_Selected_Issue.clear()
        self.listWidget_Issue.clear()
        self.listWidget_Issue.addItems(left_list)
        self.listWidget_Selected_Issue.addItems(right_list)
    
    def export_csv(self):
        #In order to write in csv format we are establishing connection 
        with open('Output.csv', mode='w',newline='') as file:
            Output_writer = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            # Empty list for header and colum values
            header_list=[]
            values_list=[]
            
            """ Gets the header for the table
            for header in list[0].keys():
            header_list.append(header) """
            
            
            writer = csv.DictWriter(file, fieldnames=main_list)
            writer.writeheader()

            values_list.append(Repo.total_opened_issues)
            values_list.append(Repo.total_closed_issues)
            values_list.append(Repo.total_issue_number)
            values_list.append(Repo.issue_count_difference)
            values_list.append(Repo.distrubution_of_issues)
            values_list.append(Repo.number_of_label_types)
            values_list.append(Repo.label_usage_freq)
            values_list.append(Repo.total_contributors)
            values_list.append(Repo.total_num_assignee_specific_issue)
            values_list.append(Repo.total_comment_no)
            values_list.append(Repo.label_colors_specific)
            values_list.append(Repo.mean_response_time)
            values_list.append(Repo.total_milestone_number)
            values_list.append(Repo.total_opened_milestones)
            values_list.append(Repo.total_closed_milestones)

            Output_writer.writerow(values_list)

            """ # Writes the column values
            for element in list:
                value=element.values()
                for i in value:
                    values_list.append(i)
                Output_writer.writerow(values_list)
                values_list=[] """
    
    def Set_Url(self):
        self.url = self.lineEdit_Url.text()
    
    def Set_Dates(self):
        s_date = self.dateEdit_Start.dateTime().toPyDateTime()
        e_date = self.dateEdit_End.dateTime().toPyDateTime()
        s_date = datetime.strftime(s_date, '%d/%m/%Y')
        self.s_date = datetime.strptime(s_date,'%d/%m/%Y')
        e_date = datetime.strftime(e_date, '%d/%m/%Y')
        self.e_date=datetime.strptime(e_date,'%d/%m/%Y')

    
    def parse_url(self):
        url = self.url
        repo_url =url.split('/')
        print(repo_url)
        if(len(repo_url)<5 or len(repo_url)>5):
            raise (Exception("Sorry, İnvalid Url PLease enter the url of the main github page..."))
        repo_url = repo_url[3]+'/'+ repo_url[4]
        print(repo_url)
        return repo_url
    
    def get_repo(self):
        #creating a GitHub object
        github = Github()
        #repo = github.get_repo("maidis/mythes-tr")
        
        #taking repository data from Github, need to enter 
        #repository owner/repository name
        #repo = github.get_repo("aapatre/Automatic-Udemy-Course-Enroller-GET-PAID-UDEMY-COURSES-for-FREE")
        
        #repo = github.get_repo("iperov/DeepFaceLab")
        #repo = github.get_repo("commaai/openpilot")
        repo = github.get_repo(self.url)
        return repo
        
    def get_issue_metrics(self,repo,s_date,e_date):
        global open_issues
        global close_issues
        global total_issues
        open_issues = repo.get_issues(state='open')
        close_issues = repo.get_issues(state='closed')
        #total open issues and closed issues
        temp =[]
        temp.append(open_issues)
        temp.append(close_issues)
        total_issues = temp
        # Issue_list.append_open_issue(open_issues)
        # Issue_list.append_close_issue(close_issues)
        temp2=[]

        for issues in open_issues:
            if(s_date <= issues.created_at):
                temp2.append(issues)
        open_issues = temp2
        
        temp2 = []
        for issues in close_issues:
            if((e_date >= issues.closed_at) and (s_date <= issues.created_at)):
                temp2.append(issues)
        close_issues = temp2
        
        total_opened_issues=0
        for i in open_issues:
            total_opened_issues+=1
        
        total_closed_issues=0
        for i in close_issues:
            total_closed_issues+=1
        
        Repo.total_closed_issues=total_closed_issues
        Repo.total_opened_issues=total_opened_issues
        Repo.total_issue_number=total_closed_issues+total_opened_issues

        #creating Open Issues-Closed Issues Graph.
        fig = plt.figure(figsize=(2.25,1.10))
        ax = fig.add_axes([1,1,1,1])
        langs = ['Opened Issues','Closed Issues']
        metric = [Repo.total_opened_issues,Repo.total_closed_issues]
        ax.bar(langs,metric)
        ax.set_title('Issue Numbers')
        #plt.show() 
        #☻fig.savefig("fig.png")
        #plt.savefig("plt.png")
        """
        plt.savefig("fig.png", dpi=1000, facecolor='b', edgecolor='b',
        orientation='landscape', papertype='a10',
        transparent=False, pad_inches=0.5)
        """
        plt.savefig('system_files/fig.png', dpi=300, bbox_inches='tight', )

        """  ["Distrubution of issues on contributors", "Number of label types", "Label usage frequency",
             "Total amount of contributors", "Total number of assignees on spesific Repo",
             "Avg. Comment Lenght", "Label colors for default Spesic titles",
             "Mean time to response the issues.", "Total amount of Milestones", "Total Opened Milestones",
             "Total Closed Milestones"] """
        
        print("Opened ones:")
        counter=1
        opened_time_taken_total = 0
        assignee = 0
        opened_assignee_no=0
        comment_no=0
        opened_total_comments = 0
        #issues={'issue_number':[],'İssue_Title':[],'time_taken':[],'assignee':[],'comment_no':[]}
        issue_list=[]
        issue_number=1
        #taking open issues' data.
        try:
            for issue in open_issues:
                time_taken = datetime.today() - issue.created_at
                opened_time_taken_total += time_taken.days
                assignee = issue.assignee
                if assignee != None:
                    opened_assignee_no += 1
                comment_no= issue.comments
                opened_total_comments += comment_no
                #issues['issue_number':issue_number,'time_taken':time_taken,'assignee':assignee,'comment_no':comment_no]
                #issue_list.append(issues)
                #export_csv(issue_list) 
                print(counter," - ",issue.title,":",assignee,",",time_taken,"Comment no: ",comment_no)
                counter +=1
                issue_number+=1
        except:
            print("Exception occured while taking open issues' metrics")
        
        #creating has assignee-No assignee graph for open issues.
        fig = plt.figure()
        ax = fig.add_axes([1,1,1,1])
        langs = ['HAS assignee','NO assignee']
        metric = [opened_assignee_no,total_opened_issues -opened_assignee_no]
        ax.bar(langs,metric)
        ax.set_title('Opened Issued')
        
        #plt.show()
        
        print("\n\n")
        
        counter=1
        closed_time_taken_total = 0
        closed_assignee_no=0
        closed_total_comments = 0
        print("Closed ones:")
        try:
            #taking closed issues' data.
            for issue in close_issues:
                time_taken = issue.closed_at - issue.created_at
                closed_time_taken_total += time_taken.days
                assignee = issue.assignee
                if assignee != None:
                    closed_assignee_no += 1
                comment_no= issue.comments
                closed_total_comments += comment_no
                print(counter," - ",issue.title,":",assignee,",",time_taken,"Comment no: ",comment_no)
                counter +=1
        except:
            print("Exception occured while taking closed issues")

        Repo.total_comment_no=closed_total_comments+opened_total_comments        
            
        print("\n\n\nTotal opened issues: ",total_opened_issues)
        print("Total closed issues: ",total_closed_issues)
        
        difference = total_opened_issues-total_closed_issues
        if difference>0:
            print("Difference between closed and opened issues: ",difference)
        else:
            print("Difference between closed and opened issues: ",difference*(-1))
        
        print("\nIssue number that has assignee: ",opened_assignee_no)
        print("Issue number that has NO assignee: ",total_opened_issues -opened_assignee_no)   
        print("Total comment no for opened issues: ",opened_total_comments)
        try:
            avg_opened_comments = opened_total_comments/total_opened_issues
            print("Average comment no for opened issues: ",avg_opened_comments)
            print("\n")    
            print("Total time for opened issues(from creating time to today): ",opened_time_taken_total)
            print("Average time for opened issues: ",opened_time_taken_total/total_opened_issues) 
            print("\n")  
            print("Total time for closed issues(from creating time to closing time): ",closed_time_taken_total)
            print("Average time for closed issues: ",closed_time_taken_total /total_closed_issues) 
            print("\nIssue number that has assignee for closed issues: ",closed_assignee_no)
            print("Issue number that has NO assignee for closed issues: ",total_closed_issues - closed_assignee_no)  
            print("Total comment no for closed issues: ",closed_total_comments)
            avg_closed_comments = closed_total_comments/total_closed_issues
            print("Average comment no for closed issues: ",avg_closed_comments)
        except:
            print("Division by zero because of 0 milestones!")
            
            
        #creating has assignee-No assignee graph for closed milestones.
        fig = plt.figure()
        ax = fig.add_axes([1,1,1,1])
        langs = ['HAS assignee','NO assignee']
        metric = [closed_assignee_no,total_closed_issues -closed_assignee_no]
        ax.bar(langs,metric)
        ax.set_title('Closed Issued')
        #plt.show()
  
            
    def get_milestone_metrics(self,repo):
        
        open_milestones = repo.get_milestones(state='open')
        close_milestones = repo.get_milestones(state='closed')
        open_milestones_list=[]
        closed_milestones_list = []
        total_open_milestones = 0
        total_closed_milestones = 0
        total_due_time = 0
        try:
            for milestone in open_milestones:
                open_milestones_list.append(milestone)
                total_open_milestones += 1
                due_time = milestone.due_on - milestone.created_at
                total_due_time += due_time.days
                print("Title: ",milestone.title,"Due Date: ", milestone.due_on," Total Time(total time given for milestone): ",due_time)
    
            avg_due_time = total_due_time / total_open_milestones
            print("Average due time for open milestones: ",avg_due_time)  
            Repo.total_opened_milestones=total_open_milestones  
        except:
            print("Exception occured while taking open milestones!")
            
        try:
            for milestone in close_milestones:
                closed_milestones_list.append(milestone)
                total_closed_milestones += 1
                time_taken_close_milestone = milestone.due_on() - milestone.created_at 
                print("Title: ",milestone.title,"Due Date: ","Due time(Total time given NOT CLOSING TIME):", time_taken_close_milestone.due_on)
            Repo.total_closed_milestones=total_closed_milestones
        except:
            print("Exception occured while taking closed milestones")
            
        Repo.total_milestone_number=Repo.total_opened_milestones+Repo.total_closed_milestones
        fig = plt.figure()
        ax = fig.add_axes([1,1,1,1])
        langs = ['Opened Milestones','Closed Milestones']
        metric = [total_open_milestones ,total_closed_milestones]
        ax.bar(langs,metric)
        ax.set_title('Milestone Numbers')
        #plt.show()

            
    #It checks repo labels generally, and then determines which labels are used opened and closed issues seperately.
    def get_label(self,repo):
        labelName = []
        labelColor = []
        labelValuesOpened = []
        labelValuesClosed = []


        for label in repo.get_labels():
            labelName.append(label.name)
            labelColor.append(label.color)
            labelValuesOpened.append(0)
            labelValuesClosed.append(0)

        for issue in open_issues:
            #print("{} - labels {} ".format(count, issue.get_labels()))
            open_labels = issue.get_labels()
            for label in open_labels:
                count = 0
                count = labelColor.index(label.color)
                labelValuesOpened[count] += 1

        count = 0
        for member in labelValuesOpened:
            if member != 0:
                print("Between opened issues, {} ({}) label is used {} times.".format(labelName[count],labelColor[count],labelValuesOpened[count]))
            count += 1


        for issue in close_issues:
            open_labels = issue.get_labels()
            for label in open_labels:
                count = 0
                count = labelColor.index(label.color)
                labelValuesClosed[count] += 1
        count = 0
        for member in labelValuesClosed:
            if member != 0:
                print("Between closed issues, {} ({}) label is used {} times.".format(labelName[count],labelColor[count],labelValuesClosed[count]))
            count += 1


    def get_issue_creators(self,repo):
        #It gives who opened and closed issues and comprasion with contributers.
        contrArray = []
        openedIssueUserArray = [] 

        repo_contributors = repo.get_contributors()
        for repo_contributor in repo_contributors:
            if repo_contributor.id not in contrArray:
                contrArray.append(repo_contributor.id)

        contr_num = len(contrArray)
        if contr_num > 1:
            print("\nThere are {} contributors for this repo.".format(contr_num))
        #elif contr_num == 1:
            #print("\nThere is one contributors for this repo as named ",contr_array[0])
        else:
            print("\nThere is NO contributors for this repo yet.")

        contr_issue = 0
        contr_not_issue = 0
        not_contr_but_issue = 0
        openedIssueUser = 0

        for issue in open_issues:
            opened_issue_user = issue.user
            if opened_issue_user.id not in openedIssueUserArray:
                openedIssueUserArray.append(opened_issue_user.id)
                contr_temp = opened_issue_user.id
                
                if (opened_issue_user.id in openedIssueUserArray) and (contr_temp in contrArray):
                    contr_issue += 1
                if(opened_issue_user.id in openedIssueUserArray) and (contr_temp not in contrArray):
                    not_contr_but_issue += 1
            
                openedIssueUser = len(openedIssueUserArray)
            contr_not_issue = len(set(contrArray) - set(openedIssueUserArray))

        print("{} of these contributors have opened issues before".format(contr_issue))
        print("{} of these contributors have NOT opened issues before".format(contr_not_issue))  
        print("Although {} people are not contributors, they have opened issue.".format(not_contr_but_issue))
        print("Issues opened by {} different people".format(openedIssueUser))      


        contr_issue = 0
        contr_not_issue = 0
        not_contr_but_issue = 0
        closedIssueUser = 0
        closedIssueUserArray = [] 

        for issue in close_issues:
            closed_issue_user = issue.user
            if closed_issue_user.id not in closedIssueUserArray:
                closedIssueUserArray.append(closed_issue_user.id)
                contr_temp = closed_issue_user.id
                
                if (closed_issue_user.id in closedIssueUserArray) and (contr_temp in contrArray):
                    contr_issue += 1
                if(closed_issue_user.id in closedIssueUserArray) and (contr_temp not in contrArray):
                    not_contr_but_issue += 1
            
                closedIssueUser = len(closedIssueUserArray)
            contr_not_issue = len(set(contrArray) - set(closedIssueUserArray))

        print("\n{} of these contributors have closed issues before".format(contr_issue))
        print("{} of these contributors have NOT closed issues before".format(contr_not_issue))  
        print("Although {} people are not contributors, they have closed issue.".format(not_contr_but_issue))
        print("Issues closed by {} different people".format(closedIssueUser))  

    def extract_data(self):
        self.get_issue_metrics(self.repo,self.s_date,self.e_date)
        self.get_milestone_metrics(self.repo)
        self.get_label(self.repo)
        self.get_issue_creators(self.repo)

    def Extract_Data_Button(self):
        self.Set_Url()
        self.url = self.parse_url()
        self.repo = self.get_repo()
        self.Set_Dates()
        self.extract_data()
        self.export_csv()

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setWindowModality(QtCore.Qt.NonModal)
        Dialog.resize(840, 650)
        Dialog.setMinimumSize(QtCore.QSize(10, 25))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(9, 94, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(7, 78, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(4, 42, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(9, 94, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(7, 78, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(4, 42, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(9, 94, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(7, 78, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(4, 42, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(6, 63, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        Dialog.setPalette(palette)
        Dialog.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(Dialog)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_17 = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("")
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout_6.addWidget(self.label_17)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_18 = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.verticalLayout_2.addWidget(self.label_18)
        self.label = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit_Url = QtWidgets.QLineEdit(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.lineEdit_Url.setPalette(palette)
        self.lineEdit_Url.setObjectName("lineEdit_Url")
        self.verticalLayout.addWidget(self.lineEdit_Url)
        self.dateEdit_Start = QtWidgets.QDateEdit(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.dateEdit_Start.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.dateEdit_Start.setFont(font)
        self.dateEdit_Start.setDateTime(QtCore.QDateTime(QtCore.QDate(2018, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateEdit_Start.setObjectName("dateEdit_Start")
        self.verticalLayout.addWidget(self.dateEdit_Start)
        self.dateEdit_End = QtWidgets.QDateEdit(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.dateEdit_End.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.dateEdit_End.setFont(font)
        self.dateEdit_End.setDateTime(QtCore.QDateTime(QtCore.QDate(2020, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateEdit_End.setObjectName("dateEdit_End")
        self.verticalLayout.addWidget(self.dateEdit_End)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_6.addLayout(self.horizontalLayout_2)
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 814, 446))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_5.addWidget(self.label_3)
        self.listWidget_Issue = QtWidgets.QListWidget(self.scrollAreaWidgetContents)
        self.listWidget_Issue.setSelectionRectVisible(False)
        self.listWidget_Issue.setObjectName("listWidget_Issue")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Issue.addItem(item)
        self.verticalLayout_5.addWidget(self.listWidget_Issue)
        self.horizontalLayout_3.addLayout(self.verticalLayout_5)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.pushButton_Select_Right = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.pushButton_Select_Right.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Select_Right.setFont(font)
        self.pushButton_Select_Right.setObjectName("pushButton_Select_Right")
        self.verticalLayout_3.addWidget(self.pushButton_Select_Right)
        self.pushButton_Select_Left = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.pushButton_Select_Left.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Select_Left.setFont(font)
        self.pushButton_Select_Left.setObjectName("pushButton_Select_Left")
        self.verticalLayout_3.addWidget(self.pushButton_Select_Left)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.horizontalLayout_3.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.listWidget_Selected_Issue = QtWidgets.QListWidget(self.scrollAreaWidgetContents)
        self.listWidget_Selected_Issue.setObjectName("listWidget_Selected_Issue")
        self.verticalLayout_4.addWidget(self.listWidget_Selected_Issue)
        self.horizontalLayout_3.addLayout(self.verticalLayout_4)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_6.addWidget(self.scrollArea)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.pushButton_extract_data = QtWidgets.QPushButton(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(3, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.pushButton_extract_data.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_extract_data.setFont(font)
        self.pushButton_extract_data.setObjectName("pushButton_extract_data")
        self.horizontalLayout.addWidget(self.pushButton_extract_data)
        self.pushButton_show = QtWidgets.QPushButton(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.pushButton_show.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_show.setFont(font)
        self.pushButton_show.setObjectName("pushButton_show")
        self.horizontalLayout.addWidget(self.pushButton_show)
        self.pushButton_main_cancel = QtWidgets.QPushButton(Dialog)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.pushButton_main_cancel.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_main_cancel.setFont(font)
        self.pushButton_main_cancel.setObjectName("pushButton_main_cancel")
        self.horizontalLayout.addWidget(self.pushButton_main_cancel)
        self.verticalLayout_6.addLayout(self.horizontalLayout)
        self.horizontalLayout_4.addLayout(self.verticalLayout_6)




        global main_list

        self.repo = None

        self.url=""

        #self.listWidget_Issue.addItems(main_list)

        self.listWidget_Issue.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)

        self.listWidget_Selected_Issue.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)

        self.pushButton_Select_Right.clicked.connect(self.move_left_to_right)

        self.pushButton_Select_Left.clicked.connect(self.move_right_to_left)

        self.pushButton_main_cancel.clicked.connect(self.cancel)

        self.pushButton_show.clicked.connect(self.show_button_clicked)

        self.pushButton_extract_data.clicked.connect(self.Extract_Data_Button)

        #self.lineEdit_Url.textChanged.connect(self.Set_Url)




        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_17.setText(_translate("Dialog", "GitHub Issue Tracker"))
        self.label_18.setText(_translate("Dialog", "URL"))
        self.label.setText(_translate("Dialog", "Start Date"))
        self.label_2.setText(_translate("Dialog", "End Date"))
        self.label_3.setText(_translate("Dialog", "Issue Related Metrics"))
        __sortingEnabled = self.listWidget_Issue.isSortingEnabled()
        self.listWidget_Issue.setSortingEnabled(False)
        item = self.listWidget_Issue.item(0)
        item.setText(_translate("Dialog", "Total Opened Isues"))
        item = self.listWidget_Issue.item(1)
        item.setText(_translate("Dialog", "Total Closed Issues"))
        item = self.listWidget_Issue.item(2)
        item.setText(_translate("Dialog", "Dıfference between opened and closed issues"))
        item = self.listWidget_Issue.item(3)
        item.setText(_translate("Dialog", "Distrubution of issues on contributors"))
        item = self.listWidget_Issue.item(4)
        item.setText(_translate("Dialog", "Number of label types"))
        item = self.listWidget_Issue.item(5)
        item.setText(_translate("Dialog", "Label usage frequency"))
        item = self.listWidget_Issue.item(6)
        item.setText(_translate("Dialog", "Total amount of contributors"))
        item = self.listWidget_Issue.item(7)
        item.setText(_translate("Dialog", "Total number of assignees on spesific issue"))
        item = self.listWidget_Issue.item(8)
        item.setText(_translate("Dialog", "Total number of comments"))
        item = self.listWidget_Issue.item(9)
        item.setText(_translate("Dialog", "Avg. Comment Lenght"))
        item = self.listWidget_Issue.item(10)
        item.setText(_translate("Dialog", "Label colors for default Spesic titles"))
        item = self.listWidget_Issue.item(11)
        item.setText(_translate("Dialog", "Mean time to response the issues"))
        item = self.listWidget_Issue.item(12)
        item.setText(_translate("Dialog", "Total amount of Milestones"))
        item = self.listWidget_Issue.item(13)
        item.setText(_translate("Dialog", "Total Opened Milestones"))
        item = self.listWidget_Issue.item(14)
        item.setText(_translate("Dialog", "Total Closed Milestones"))
        self.listWidget_Issue.setSortingEnabled(__sortingEnabled)
        self.pushButton_Select_Right.setText(_translate("Dialog", ">"))
        self.pushButton_Select_Left.setText(_translate("Dialog", "<"))
        self.label_4.setText(_translate("Dialog", "Selected Issue Related Metrics"))
        self.pushButton_extract_data.setText(_translate("Dialog","Extract Data"))
        self.pushButton_show.setText(_translate("Dialog", "Show"))
        self.pushButton_main_cancel.setText(_translate("Dialog", "Cancel"))



class Repository():
  def __init__(self):
    self.total_opened_issues=0
    self.total_closed_issues=0
    self.total_issue_number=0




open_issues = []
close_issues = []
total_issues = []        
#Gets a dictionary list and export a csv file
def export_csv(list):
    #In order to write in csv format we are establishing connection 
    with open('Output.csv', mode='w',newline='') as file:
        Output_writer = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        # Empty list for header and colum values
        header_list=[]
        values_list=[]
        
        # Gets the header for the table
        for header in list[0].keys():
            header_list.append(header)
        
        writer = csv.DictWriter(file, fieldnames=header_list)
        writer.writeheader()
        
        # Writes the column values
        for element in list:
            value=element.values()
            for i in value:
                values_list.append(i)
            Output_writer.writerow(values_list)
            values_list=[]
        




# Plotları ayır(draw_plot)
# Output dictionary formatlarını ayarla ve nasıl return edicekler onu belirle
# Csv formatını tekrar ayarla 
  
    
def get_milestone_metrics(repo):
    
    open_milestones = repo.get_milestones(state='open')
    close_milestones = repo.get_milestones(state='closed')
    open_milestones_list=[]
    closed_milestones_list = []
    total_open_milestones = 0
    total_closed_milestones = 0
    total_due_time = 0
    try:
        for milestone in open_milestones:
            open_milestones_list.append(milestone)
            total_open_milestones += 1
            due_time = milestone.due_on - milestone.created_at
            total_due_time += due_time.days
            print("Title: ",milestone.title,"Due Date: ", milestone.due_on," Total Time(total time given for milestone): ",due_time)
  
        avg_due_time = total_due_time / total_open_milestones
        print("Average due time for open milestones: ",avg_due_time)    
    except:
        print("Exception occured while taking open milestones!")
        
    try:
        for milestone in close_milestones:
            closed_milestones_list.append(milestone)
            total_closed_milestones += 1
            time_taken_close_milestone = milestone.due_on() - milestone.created_at 
            print("Title: ",milestone.title,"Due Date: ","Due time(Total time given NOT CLOSING TIME):", time_taken_close_milestone.due_on)
    except:
        print("Exception occured while taking closed milestones")
        
    fig = plt.figure()
    ax = fig.add_axes([1,1,1,1])
    langs = ['Opened Milestones','Closed Milestones']
    metric = [total_open_milestones ,total_closed_milestones]
    ax.bar(langs,metric)
    ax.set_title('Milestone Numbers')
    #plt.show()

        
#It checks repo labels generally, and then determines which labels are used opened and closed issues seperately. 
def get_label(repo):
  labelName = []
  labelColor = []
  labelValuesOpened = []
  labelValuesClosed = []


  for label in repo.get_labels():
      labelName.append(label.name)
      labelColor.append(label.color)
      labelValuesOpened.append(0)
      labelValuesClosed.append(0)

  for issue in open_issues:
      #print("{} - labels {} ".format(count, issue.get_labels()))
      open_labels = issue.get_labels()
      for label in open_labels:
          count = 0
          count = labelColor.index(label.color)
          labelValuesOpened[count] += 1

  count = 0
  for member in labelValuesOpened:
      if member != 0:
          print("Between opened issues, {} ({}) label is used {} times.".format(labelName[count],labelColor[count],labelValuesOpened[count]))
      count += 1


  for issue in close_issues:
      open_labels = issue.get_labels()
      for label in open_labels:
          count = 0
          count = labelColor.index(label.color)
          labelValuesClosed[count] += 1
  count = 0
  for member in labelValuesClosed:
      if member != 0:
          print("Between closed issues, {} ({}) label is used {} times.".format(labelName[count],labelColor[count],labelValuesClosed[count]))
      count += 1


def get_issue_creators(repo):
  #It gives who opened and closed issues and comprasion with contributers.
  contrArray = []
  openedIssueUserArray = [] 

  repo_contributors = repo.get_contributors()
  for repo_contributor in repo_contributors:
      if repo_contributor.id not in contrArray:
          contrArray.append(repo_contributor.id)

  contr_num = len(contrArray)
  if contr_num > 1:
      print("\nThere are {} contributors for this repo.".format(contr_num))
  #elif contr_num == 1:
      #print("\nThere is one contributors for this repo as named ",contr_array[0])
  else:
      print("\nThere is NO contributors for this repo yet.")

  contr_issue = 0
  contr_not_issue = 0
  not_contr_but_issue = 0
  openedIssueUser = 0

  for issue in open_issues:
      opened_issue_user = issue.user
      if opened_issue_user.id not in openedIssueUserArray:
          openedIssueUserArray.append(opened_issue_user.id)
          contr_temp = opened_issue_user.id
          
          if (opened_issue_user.id in openedIssueUserArray) and (contr_temp in contrArray):
              contr_issue += 1
          if(opened_issue_user.id in openedIssueUserArray) and (contr_temp not in contrArray):
              not_contr_but_issue += 1
      
          openedIssueUser = len(openedIssueUserArray)
      contr_not_issue = len(set(contrArray) - set(openedIssueUserArray))

  print("{} of these contributors have opened issues before".format(contr_issue))
  print("{} of these contributors have NOT opened issues before".format(contr_not_issue))  
  print("Although {} people are not contributors, they have opened issue.".format(not_contr_but_issue))
  print("Issues opened by {} different people".format(openedIssueUser))      


  contr_issue = 0
  contr_not_issue = 0
  not_contr_but_issue = 0
  closedIssueUser = 0
  closedIssueUserArray = [] 

  for issue in close_issues:
      closed_issue_user = issue.user
      if closed_issue_user.id not in closedIssueUserArray:
          closedIssueUserArray.append(closed_issue_user.id)
          contr_temp = closed_issue_user.id
          
          if (closed_issue_user.id in closedIssueUserArray) and (contr_temp in contrArray):
              contr_issue += 1
          if(closed_issue_user.id in closedIssueUserArray) and (contr_temp not in contrArray):
              not_contr_but_issue += 1
      
          closedIssueUser = len(closedIssueUserArray)
      contr_not_issue = len(set(contrArray) - set(closedIssueUserArray))

  print("\n{} of these contributors have closed issues before".format(contr_issue))
  print("{} of these contributors have NOT closed issues before".format(contr_not_issue))  
  print("Although {} people are not contributors, they have closed issue.".format(not_contr_but_issue))
  print("Issues closed by {} different people".format(closedIssueUser))  





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
   
    ui.setupUi(Dialog)
    ui.Get_Ui(Dialog)
    Dialog.show()

    #Dialog.destroy()
    sys.exit(app.exec_())
